27-> Find the node where two singly linked lists intersect

#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* getIntersectionNode(ListNode* headA, ListNode* headB) {
    if (!headA || !headB) return nullptr;

    ListNode* a = headA;
    ListNode* b = headB;

    while (a != b) {
        if (a == nullptr) {
            a = headB;
        } else {
            a = a->next;
        }
        
        if (b == nullptr) {
            b = headA;
        } else {
            b = b->next;
        }
    }

    return a; 
}

int main() {
    ListNode* headA = new ListNode(1);
    headA->next = new ListNode(3);
    headA->next->next = new ListNode(5);
    headA->next->next->next = new ListNode(7);
    headA->next->next->next->next = new ListNode(9);

    ListNode* headB = new ListNode(2);
    headB->next = new ListNode(4);
    headB->next->next = headA->next->next->next;  // Intersection at node 7

    ListNode* intersection = getIntersectionNode(headA, headB);

    if (intersection) {
        cout << "Intersection node value: " << intersection->val << endl;
    } else {
        cout << "No intersection" << endl;
    }

    return 0;
}
