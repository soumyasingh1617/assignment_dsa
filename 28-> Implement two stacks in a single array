28-> Implement two stacks in a single array
#include <iostream>
using namespace std;

class TwoStacks {
private:
    int* arr;
    int size;
    int top1, top2;

public:
    TwoStacks(int n) {
        size = n;
        arr = new int[size];
        top1 = -1;
        top2 = size;
    }
    void push1(int x) {
        if (top1 < top2 - 1) {
            top1++;
            arr[top1] = x;
        } else {
            cout << "Stack Overflow! Stack 1 is full." << endl;
        }
    }
    void push2(int x) {
        if (top1 < top2 - 1) {
            top2--;
            arr[top2] = x;
        } else {
            cout << "Stack Overflow! Stack 2 is full." << endl;
        }
    }
    int pop1() {
        if (top1 >= 0) {
            int poppedValue = arr[top1];
            top1--;
            return poppedValue;
        } else {
            cout << "Stack Underflow! Stack 1 is empty." << endl;
            return -1;
        }
    }
    int pop2() {
        if (top2 < size) {
            int poppedValue = arr[top2];
            top2++;
            return poppedValue;
        } else {
            cout << "Stack Underflow! Stack 2 is empty." << endl;
            return -1;
        }
    }
    void display1() {
        if (top1 >= 0) {
            cout << "Stack 1: ";
            for (int i = 0; i <= top1; i++) {
                cout << arr[i] << " ";
            }
            cout << endl;
        } else {
            cout << "Stack 1 is empty." << endl;
        }
    }
    void display2() {
        if (top2 < size) {
            cout << "Stack 2: ";
            for (int i = size - 1; i >= top2; i--) {
                cout << arr[i] << " ";
            }
            cout << endl;
        } else {
            cout << "Stack 2 is empty." << endl;
        }
    }
    ~TwoStacks() {
        delete[] arr;
    }
};

int main() {
    TwoStacks stacks(10);

    stacks.push1(5);
    stacks.push1(10);
    stacks.push2(20);
    stacks.push2(30);

    stacks.display1();
    stacks.display2(); 

    cout << "Popped from Stack 1: " << stacks.pop1() << endl;
    cout << "Popped from Stack 2: " << stacks.pop2() << endl;

    stacks.display1(); // Stack 1: 5
    stacks.display2(); // Stack 2: 30 20

    return 0;
}
